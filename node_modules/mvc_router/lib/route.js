var rp = require("url");
var cwd = process.cwd();
var fs = require("fs");
var basename = require('path').basename;


function controller(path){
    if(!path) {
        return controller.dispath;
    }
    var url = controller.parseMethod(path);
    return controller.server(url["control"],url["action"]);
}

controller.path = "controller";

controller.parseMethod = function(path) {
    var arr = path.split('.');
    if(arr.length <2) {
        arr[1] = 'index';
    }
    return {"control":arr[0],"action":arr[1]};
}

controller.parseUrl = function(path) {
    path = path.replace(/^\//,'').replace(/\/$/,'')
    var arr = path.split('/');
    if(arr.length <2) {
        arr[1] = 'index';
    }
    return {"control":arr[0],"action":arr[1]};
}

controller.server = function (control,action){
    if(typeof controller[control][action] == 'function') {
        return controller[control][action];
    }
    return controller.dispath;
}

controller.dispathToFile = function(method,action,control,args,next){
    if(arguments.length <5) {
        console.log("dispath File Params error <5 ");
        exit();
    }
    console.log(method);
    console.log(action);
    console.log(control);
        fs.exists(cwd+"/"+controller.path+"/"+control+".js",function(exist){
            if(exist && typeof require(cwd+"/"+controller.path+"/"+control)[method][action] == "function" ) {
                try {
                    return require(cwd+"/"+controller.path+"/"+control)[method][action].apply(null,args);
                }catch(e) {
                    //console.log("52 controller dispathToFile "+cwd+"/"+controller.path+"/"+control+"["+method+"]"+"["+action+"]  :"+e);
                    next();
                }
            } else {
                next();
            }
        });
}

controller.dispath = function (req,res,next){
    //console.log(arguments[2]);
    var url = rp.parse(req.url,true);
    var args = [].slice.call(arguments,0);

    var params = url.pathname.split('/');
    var url_params = controller.parseUrl(url.pathname); 

    if(params[0]=='') {
        params = params.slice(1);
    }
    if(params.length <1 ) {
        return next();
    }
    var method=req.method.toLowerCase();
    var control = url_params['control'];
    var action = url_params['action'];


    if(typeof controller[control] == 'function' && typeof controller[control][method] == 'function' && typeof controller[control][method][action] == 'function') {
        controller[control][method][action].apply(null,args);
    } else {
        return controller.dispathToFile(method,action,control,args,next);
    }
}




/*
 *
 * */
function router(app,configPath){
    this.app = app;      
    this.init(configPath);
}

var defaultModelPath = "model";
var defaultControlPath="controller";

router.prototype.initMvcComp = function(configPath){
    var modelDir = this._modelDir;
    controller.path = this._controlDir;
    global.$Model = function(name){
        try{
            return require(cwd+"/"+modelDir+"/"+name);
        }catch(e) {
           // console.log("init MVC Comp require model error:"+cwd+"/"+modelDir+"/"+name);
        }
    }

    fs.readdirSync(cwd+ '/controller').forEach(function(filename){
        if (!/\.js$/.test(filename)) return;
        var name = basename(filename, '.js');
        function load(){ return require(cwd+'/'+controller.path+'/' + name); }
        controller.__defineGetter__(name, load);
    });
}

router.prototype.initRouteMap = function (){
    this.map = require(cwd+"/route_config");

    var app = this.app;
    var map = this.map;
    var self = this;
    map.forEach(function(v) {
        var method = !!v['method'] ? v['method'] : "all";
        var action = controller(v['action']);

        var reg = v['reg'];

        method == "all" ? app.all(reg,action):app[method].call(app,reg,action);
    });
    app.all("*",function(){ 
        var args = arguments;
        controller.dispath.apply(controller,args);
    });
}

router.prototype.initConfig = function(config) {
    if(typeof config =="undefined") {
        this._modelDir = defaultModelPath;
        this._controlDir = defaultControlPath;
    } else {
        this._modelDir = typeof config['modelDir'] == 'undefined' ? defaultModelPath :config['modelDir'];
        this._controlDir = typeof config['controlDir'] == 'undefined' ?  defaultControlPath : config['controlDir'];
    }
/*
    if(fs.existsSync(this._controlDir)){
        console.log("controller path invalid"+this._controlDir);
    }

    if(fs.existsSync(this._modelDir)){
        console.log("model path invalid");
    }*/

}
router.prototype.init = function(config){
    this.initConfig(config);
    this.initMvcComp();
    this.initRouteMap();
}


module.exports = router;
