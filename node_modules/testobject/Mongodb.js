var Pools = require("./pools");
var DB = require('mongodb').Db,Server = require('mongodb').Server;

var db = new DB("test_db", new Server("127.0.0.1", 27017,{poolSize: 4,auto_reconnect:true}),{w:1, native_parser: false});

function Mongodb(){
    this._pools = new Pools();
    var self = this;
    this.switchExec(1);
    db.open(function(err,db){
            console.log("10");
            if(err!= null || db == null) {
                console.log("db open error");
                self.switchExec(1);
                return ;
            }
            self.switchExec(2);
            self.flushHandleCache();
            });
}

Mongodb.prototype.isCacheEmpty = function(){
    return this._pools.length >0;
}


Mongodb.prototype.insert=function(name,data,callback){
    var sql = this.parseSQL(data);

    this.exec(name,sql,function(collection,sql){
            try{
            collection.insert(sql.data,{w:1},callback);
            }catch(e){
            console.log(e);
            }
            });
}

Mongodb.prototype.remove=function(name,data,callback){
    var sql = this.parseSQL(data);

    this.exec(name,sql,function(collection,sql){
            collection.remove(sql.filter,{w:1},callback);
            });

}

Mongodb.prototype.removeOne = function(name,data,callback) {
    var sql = this.parseSQL(data);

    this.exec(name,sql,function(collecion,sql){
            collection.remove(sql.filter,{w:1,sigle:true},callback);
            });
}

Mongodb.prototype.find=function(name,data,callback){
    var sql = this.parseSQL(data);
    this.exec(name,sql,function(collection,sql){
            collection.find(sql.data,sql.options).toArray(callback);      
            });
}

Mongodb.prototype.parseSQL = function(data){
    /*
     * var sql={"data":data,
      "filter":filter};
        */
    var sql={};
    if(typeof data.data == "undefined" && typeof data.options == "undefined") {
        sql.data=data;
        sql.options={};
    } else if(typeof data.options == "undefined"){
        sql = data;
        sql.options={};
    } else {
        sql = data;
        sql.data={};
    }

    for(var i in sql) {
        
    }

    return sql;
}


Mongodb.prototype.handleCache=function(name,data,callback){
    this._pools.addEvent(function(){
            db.collection(name,{strict:true},function(err,collection){
                callback(collection,data);
                });
            });
}

Mongodb.prototype.flushHandleCache = function(){
    this._pools.start();
}

/*1,cache
 *2,Normal*/

Mongodb.prototype.switchExec = function(flag){
    if(flag == 1) {
        this.exec = this.handleCache;
    } else {
        this.exec = this.normalExec;
    }
}

Mongodb.prototype.normalExec=function(name,data,callback) {
    try{
        db.collection(name,{strict:true},function(err,collection){
                callback(collection,data);
                });
    } catch(e){
        console.log("43"+e);
    }
}

Mongodb.prototype.update = function(name,data,callback){
    var sql = this.parseSQL(data);

    this.exec(name,sql,function(collection,data){
            collection.update(sql.filter,{$set:sql.data},callback);
            });
}

//var instance_db = new Mongodb();
exports = module.exports = Mongodb;

